$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function ==
void<CURSOR>
|?FUNCTION_NAME| (  ) {
<SPLIT>	return ;
}		// -----  end of function |FUNCTION_NAME|  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function-static ==
static void<CURSOR>
|?FUNCTION_NAME| (  ) {
<SPLIT>	return ;
}		// -----  end of static function |FUNCTION_NAME|  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.main ==
int
main ( int argc, char *argv[] ) {<CURSOR>
<SPLIT>	return 0;
}				// ----------  end of function main  ----------
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.enum ==
enum |?ENUM_NAME| {<CURSOR>
<SPLIT>};				// ----------  end of enum |ENUM_NAME|  ----------
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.struct ==
struct |?STRUCT_NAME| {<CURSOR>
<SPLIT>};				// ----------  end of struct |STRUCT_NAME|  ----------
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.union ==
union |?UNION_NAME| {<CURSOR>
<SPLIT>};				// ----------  end of union |UNION_NAME|  ----------
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.printf ==
printf ( "<CURSOR>\n" );
== idioms.scanf ==
scanf ( "<CURSOR>", & );
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.calloc ==
|?POINTER|	= (<CURSOR>TYPE*)calloc ( (size_t)(COUNT), sizeof(TYPE) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free (|POINTER|);

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.malloc ==
|?POINTER|	= (<CURSOR>TYPE*)malloc ( sizeof(TYPE) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free (|POINTER|);

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.sizeof == insert ==
sizeof(<CURSOR><SPLIT>)
== idioms.assert == insert ==
assert(<CURSOR><SPLIT>);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-input-file ==
char	*|FILEPOINTER|FN = "<CURSOR>"; //!< input-file name
FILE	*|?FILEPOINTER| = fopen( |FILEPOINTER|FN, "r" );; //!< input-file pointer

if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|FN, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>
if( fclose(|FILEPOINTER|) == EOF ) { // close input file
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|FN, strerror(errno) );
	exit (EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-output-file ==
char	*|FILEPOINTER|FN = "<CURSOR>"; //!< output-file name
FILE	*|?FILEPOINTER| = fopen( |FILEPOINTER|FN, "w" ); //!< output-file pointer

if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|FN, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>
if( fclose(|FILEPOINTER|) == EOF ) {			// close output file
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|FN, strerror(errno) );
	exit (EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.fprintf ==
fprintf ( |?FILEPOINTER|, "<CURSOR>\n",  );
== idioms.fscanf ==
fscanf ( |?FILEPOINTER|, "<CURSOR>", & );
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
